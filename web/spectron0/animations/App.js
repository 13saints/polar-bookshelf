"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_1 = require("react");
const react_router_dom_1 = require("react-router-dom");
const framer_motion_1 = require("framer-motion");
exports.FadeIn = (props) => {
    return (React.createElement(framer_motion_1.motion.div, { initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 } }, props.children));
};
exports.RightSidebar = (props) => {
    const style = Object.assign({ position: 'absolute', right: 0, top: 0, width: '350px', height: '100%' }, props.style || {});
    return (React.createElement(framer_motion_1.motion.div, { key: "right-sidebar", initial: { right: -350 }, animate: { right: 0 }, exit: { right: -350 }, style: style }, props.children));
};
const FirstPage = () => (React.createElement(exports.FadeIn, null, "this is the first page"));
const SecondPage = () => (React.createElement(exports.FadeIn, null, "this is the second page"));
const ThirdPage = () => (React.createElement("div", null, "this is the third page just inside a basic div"));
const RightSidebarPage = () => (React.createElement(exports.RightSidebar, { style: { backgroundColor: 'red' } },
    React.createElement("div", null, "this is the left sidebar")));
const ToggleVisibilityButton = (props) => (React.createElement("button", { onClick: () => props.onClick() }, "toggle visibility"));
const ToggleFade = (props) => {
    if (props.show) {
        return (React.createElement("div", null,
            React.createElement(ToggleVisibilityButton, { onClick: () => props.toggle() }),
            React.createElement(exports.FadeIn, null, "This should fade in and out on toggle")));
    }
    else {
        return (React.createElement("div", null,
            React.createElement(ToggleVisibilityButton, { onClick: () => props.toggle() })));
    }
};
const ToggleVisibility = () => {
    const [show, toggle] = react_1.useState(true);
    return (React.createElement(framer_motion_1.AnimatePresence, null,
        React.createElement(ToggleFade, { show: show, toggle: () => toggle(!show) })));
};
exports.App = () => (React.createElement(react_router_dom_1.HashRouter, { key: "browser-router", hashType: "noslash", basename: "/" },
    React.createElement("div", { style: { display: 'flex' } },
        React.createElement(react_router_dom_1.Link, { to: "/" }, "home"),
        "\u00A0",
        React.createElement(react_router_dom_1.Link, { to: "/second" }, "second"),
        "\u00A0",
        React.createElement(react_router_dom_1.Link, { to: "/third" }, "third"),
        "\u00A0",
        React.createElement(react_router_dom_1.Link, { to: "/toggler" }, "toggler"),
        "\u00A0",
        React.createElement(react_router_dom_1.Link, { to: "/sidebar" }, "sidebar")),
    React.createElement(react_router_dom_1.Route, { render: ({ location }) => (React.createElement(framer_motion_1.AnimatePresence, { exitBeforeEnter: true, initial: false },
            React.createElement(react_router_dom_1.Switch, null,
                React.createElement(react_router_dom_1.Route, { exact: true, path: '/', component: FirstPage }),
                React.createElement(react_router_dom_1.Route, { exact: true, path: '/second', component: SecondPage }),
                React.createElement(react_router_dom_1.Route, { exact: true, path: '/third', component: ThirdPage }),
                React.createElement(react_router_dom_1.Route, { exact: true, path: '/toggler', component: ToggleVisibility }),
                React.createElement(react_router_dom_1.Route, { exact: true, path: '/sidebar', component: RightSidebarPage })))) })));
//# sourceMappingURL=data:application/json;base64,