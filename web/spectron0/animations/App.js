"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_1 = require("react");
const framer_motion_1 = require("framer-motion");
exports.FadeIn = (props) => {
    return (React.createElement(framer_motion_1.motion.div, { key: "fade-in-motion", initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 } }, props.children));
};
exports.FadeIn2 = (props) => {
    const pageVariants = {
        initial: {
            opacity: 0,
        },
        in: {
            opacity: 1,
        },
        out: {
            opacity: 0,
        }
    };
    return (React.createElement(framer_motion_1.motion.div, { key: "fade-in-2-motion", initial: "initial", animate: "in", exit: "out", variants: pageVariants }, props.children));
};
exports.RightSidebar = (props) => {
    const style = Object.assign({ position: 'absolute', right: 0, top: 0, width: '350px', height: '100%' }, props.style || {});
    return (React.createElement(framer_motion_1.motion.div, { key: "right-sidebar", initial: { right: -350 }, animate: { right: 0 }, exit: { right: -350 }, style: style }, props.children));
};
const FirstPage = () => (React.createElement(exports.FadeIn, null, "this is the first page"));
const SecondPage = () => (React.createElement(exports.FadeIn, null, "this is the second page"));
const ThirdPage = () => (React.createElement("div", null, "this is the third page just inside a basic div"));
const RightSidebarPage = () => (React.createElement(exports.RightSidebar, { style: { backgroundColor: 'red' } },
    React.createElement("div", null, "this is the left sidebar")));
const ToggleVisibilityButton = (props) => (React.createElement("button", { key: "toggle-button-impl", onClick: () => props.onClick() }, "toggle visibility"));
const ToggleFade = (props) => {
    if (props.show) {
        return (React.createElement("div", { key: "toggle-fade" },
            React.createElement(ToggleVisibilityButton, { key: "toggle-button", onClick: () => props.toggle() }),
            React.createElement(exports.FadeIn, { key: "fade-in" },
                React.createElement("div", { key: "fade-content" }, "This should fade in and out on toggle"))));
    }
    else {
        return (React.createElement("div", { key: "toggle-fade" },
            React.createElement(ToggleVisibilityButton, { key: "toggle-button", onClick: () => props.toggle() })));
    }
};
const ToggleVisibility = () => {
    const [show, toggle] = react_1.useState(true);
    return (React.createElement(framer_motion_1.AnimatePresence, null,
        React.createElement(ToggleFade, { key: "toggle-fade", show: show, toggle: () => toggle(!show) })));
};
exports.App = () => (React.createElement(ToggleVisibility, null));
//# sourceMappingURL=data:application/json;base64,